 export class helper {
        public static SetDisabledAttributeControls(attribute: Xrm.Attributes.Attribute, isDisabled: boolean) {
			if (!attribute) return;

            attribute.controls.forEach((control: Xrm.Controls.StandardControl) => {
                control.setDisabled(isDisabled);
            });
        }

        public static SetVisibleAttributeControls(attribute: Xrm.Attributes.Attribute, isVisible: boolean) {
            if (!attribute) return;
            attribute.controls.forEach((control: Xrm.Controls.StandardControl, i) => {
                control.setVisible(isVisible);
            });
        }

        public static SetAttributeRequirementLevel(attribute: Xrm.Attributes.Attribute, requirementLevel: Xrm.Attributes.RequirementLevel) {
            if (!attribute || !requirementLevel) {
                return;
            }

            attribute.setRequiredLevel(requirementLevel);
		}

		static setOptionSetItems(attributeName: string, optionsToSet: number[]) {
			let optionSetAttribute: Xrm.Attributes.OptionSetAttribute = Xrm.Page.getAttribute<Xrm.Attributes.OptionSetAttribute>(attributeName);
			let selectedOption: Xrm.OptionSetValue = optionSetAttribute.getSelectedOption();
			let attributeOptionSetValues: Xrm.OptionSetValue[] = optionSetAttribute.getOptions();

			optionSetAttribute.controls.forEach((control, index) => {
				for (let i: number = 0; i < attributeOptionSetValues.length; i++) {
					if (selectedOption && attributeOptionSetValues[i].value === selectedOption.value) {
						continue;
					}

					if (optionsToSet.indexOf(attributeOptionSetValues[i].value) === -1) {
						control.removeOption(attributeOptionSetValues[i].value);
					}
				}
			});
		}

		public static setOptionSetItemsByAttr(optionSetAttribute: Xrm.Attributes.OptionSetAttribute, optionsToSet: number[]) {
			//let optionSetAttribute: Xrm.Page.OptionSetAttribute = Xrm.Page.getAttribute<Xrm.Page.OptionSetAttribute>(attributeName);
			let selectedOption: Xrm.OptionSetValue = optionSetAttribute.getSelectedOption();
			let attributeOptionSetValues: Xrm.OptionSetValue[] = optionSetAttribute.getOptions();

			optionSetAttribute.controls.forEach((control, index) => {
				control.clearOptions();

				for (let i: number = 0; i < attributeOptionSetValues.length; i++) {
					if (selectedOption && attributeOptionSetValues[i].value === selectedOption.value) {
						control.addOption(attributeOptionSetValues[i]);
						optionSetAttribute.setValue(attributeOptionSetValues[i].value);
						continue;
					}

					if (optionsToSet) {
						if (optionsToSet.indexOf(attributeOptionSetValues[i].value) > -1) {
							control.addOption(attributeOptionSetValues[i]);
						}
					}
					else {
						control.addOption(attributeOptionSetValues[i]);
					}
				}
			});
		}

		public static isUserHasRole(userId: string, rolesNames: string[]) {
			let userRolesNames = Mso.helper.getUserRoles(userId);
			for (var i = 0; i < rolesNames.length; i++) {
				if (userRolesNames.indexOf(rolesNames[i].toLowerCase()) > -1) { return true; }
			}
			return false;
		}

		public static getUserRoles(userId: string) {
			let resultRoles = [];
			let clientUrl = parent.Xrm.Page.context.getClientUrl();
			let apiRelativeUrl = "/api/data/v9.0";
			let params = "$select=systemuserroles_association&$expand=systemuserroles_association($select=name)";
			let url = clientUrl + apiRelativeUrl + "/systemusers(" + userId.replace(/[{}]/g, "") + ")?" + params;

			let req = new XMLHttpRequest();
			req.open("GET", url, false);
			req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
			req.setRequestHeader("OData-MaxVersion", "4.0");
			req.setRequestHeader("OData-Version", "4.0");
			req.setRequestHeader("Accept", "application/json");
			req.setRequestHeader("Cache-Control", "no-cache");

			req.onreadystatechange = function (results) {
				if (req.readyState === 4) {
					if (req.status === 200) {
						if (req.responseText !== null && req.responseText !== undefined && req.responseText != "") {
							let result = JSON.parse(req.responseText);

							let systemRoles = result.systemuserroles_association;
							for (var i = 0; i < systemRoles.length; i++) {
								resultRoles.push(systemRoles[i].name.toLowerCase());
							}
						}
					}
					else {
						alert(JSON.parse(req.response).error.message);
					}
				}
			};
			req.send();
			return resultRoles;
		}

		public static GetDate(sourceDate: any): Date {
			let date = new Date(sourceDate);
			let year = date.getFullYear();
			let month = date.getMonth();
			let day = date.getDate();

			return new Date(year, month, day);
        }

        public static GetDateDiffInDays(fromDate: any, toDate: any) {
            let fromDateOnly = this.GetDate(fromDate);
            let toDateOnly = this.GetDate(toDate);

            return (<any>fromDateOnly - <any>toDateOnly) / 86400000;
        }

        public static popupwindow(url, title, w, h) {
            var left = (screen.width / 2) - (w / 2);
            var top = (screen.height / 2) - (h / 2);
            return window.open(url, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);
        }
    }
